# Rafiki AI

## Development Setup

### Prerequisites
- **Docker Desktop** (includes Docker Compose)
- **Git**
- **Python 3.11+** (for virtual environment and testing)

### Quick Start
1. Clone the repository:
   ```bash
   git clone <your-repo-url>
   cd <your-project-name>
   ```

2. Create and activate a virtual environment:
   ```bash
   python -m venv venv
   
   # On Windows:
   venv\Scripts\activate
   
   # On macOS/Linux:
   source venv/bin/activate
   ```

3. Install Python dependencies:
   ```bash
   pip install -r requirements.txt
   ```

4. Make sure your installed docker is running.

5. Start the local server testing the chat on browser:
   ```bash
   make run-local-with-chat
   ```

6. The application will be available and you can test it by opening the chat interface in your browser as indicated by the make command output.

### Available Make Commands

```bash
# Start local development server
make run-local

# Start local server and open chat interface
make run-local-with-chat

# Run all tests
make test

# Run fast unit tests only
make test-fast

# Run model tests specifically
make test-models

# Run tests with coverage report
make test-coverage

# Run evaluations
make run-evals

# Install test dependencies
make install-test-deps

# Update requirements.txt
make freeze-req
```

### Development Workflow

1. **Start development:** `make run-local`
2. **Run tests:** `make test-fast` (for quick feedback)
3. **Full test suite:** `make test` (before committing)
4. **Test with coverage:** `make test-coverage` (to check test coverage)

### Services

When you run `make run-local`, the following services start:
- **Application API:** Available via Docker
- **PostgreSQL Database:** Available via Docker
- **Chat Interface:** `chat_tester.html` in your browser

### Troubleshooting

**Port conflicts:**
- Check if ports 5432 (postgres) or 8000 (app) are already in use
- Stop the conflicting services or modify `docker-compose.yml`

**Database issues:**
```bash
# Reset everything
docker-compose down -v
make run-local
```

**Permission issues (Linux):**
```bash
sudo chown -R $USER:$USER .
```

**Python virtual environment issues:**
```bash
# Recreate virtual environment
rm -rf venv
python -m venv venv
source venv/bin/activate  # or venv\Scripts\activate on Windows
pip install -r requirements.txt
```

### Project Structure
```
├── app/                    # Application code
├── tests/                  # Test suite
├── local_run/             # Local development files
├── docker-compose.yml     # Development environment
├── Dockerfile            # App container definition
├── requirements.txt      # Python dependencies
├── Makefile             # Development commands
└── README.md            # This file
```

## Production Deployment (Heroku)

### Prerequisites for Deployment
- **Heroku CLI** installed
- **Access to the Heroku app** (you'll be added as a collaborator)

### One-Time Setup

1. **Install Heroku CLI:**
   ```bash
   # macOS
   brew tap heroku/brew && brew install heroku
   
   # Windows
   # Download from https://devcenter.heroku.com/articles/heroku-cli
   
   # Ubuntu/Debian
   curl https://cli-assets.heroku.com/install.sh | sh
   ```

2. **Login to Heroku:**
   ```bash
   heroku login
   ```

3. **Add Heroku remote** (replace `your-app-name` with actual app name):
   ```bash
   heroku git:remote -a your-app-name
   ```

### Deployment Process

1. **Test locally first:**
   ```bash
   make test
   make run-local-with-chat
   ```

2. **Commit your changes:**
   ```bash
   git add .
   git commit -m "Your commit message"
   git push origin main
   ```

3. **Deploy to production:**
   #### Add the web-client Heroku remote with a custom name
   heroku git:remote -a rafiki-ai-web -r heroku-web

   #### Now you have two remotes:
   #### - heroku (for your Flutter app)
   #### - heroku-web (for your React app)

   #### To deploy web-client:
   git subtree push --prefix web-client heroku-web main

4. **Monitor deployment:**
   ```bash
   heroku logs --tail
   ```

### Useful Heroku Commands

```bash
# View app status
heroku ps

# View recent logs
heroku logs --tail

# Open app in browser
heroku open

# Run database migrations/setup
heroku run python -m app.storage.init_db

# Access production shell
heroku run bash

# View environment variables
heroku config

# Restart the app
heroku restart
```

### Pre-Deployment Checklist

- [ ] All tests pass locally (`make test`)
- [ ] Local development works (`make run-local-with-chat`)
- [ ] Changes committed to git
- [ ] Code reviewed (if required)
- [ ] Database migrations tested (if any)

### Deployment Troubleshooting

**Build failures:**
```bash
# Check detailed build logs
heroku logs --tail

# Clear build cache if needed
heroku builds:cache:purge
```

**App not starting:**
```bash
# Check dyno status
heroku ps

# Restart if needed
heroku restart

# Check for errors
heroku logs --tail
```

**Database issues:**
```bash
# Check database status
heroku pg:info

# Reset database (⚠️ CAUTION: destroys all data)
heroku pg:reset DATABASE_URL
heroku run python -m app.storage.init_db
```